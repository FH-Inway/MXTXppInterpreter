<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppInterpreterExecutor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class MXTXppInterpreterExecutor
{
    private static XppInterpreter.Interpreter.Proxy.XppProxy proxy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    static void TypeNew()
    {
        proxy = new XppInterpreter.Interpreter.Proxy.XppProxy(
            new MXTXppIntrinsicFunctionProvider(),
            new MXTXppBinaryOperationProxy(),
            new MXTXppCastingProxy(),
            new MXTXppUnaryOperationProxy(),
            new MXTXppDataAccessProxy(),
            new MXTXppReflectionProxy(),
            new MXTXppExceptionsProxy(),
            new MXTXppQueryGenerationProxy());
    }

]]></Source>
			</Method>
			<Method>
				<Name>base64Encode</Name>
				<Source><![CDATA[
    public static str base64Encode(str _sourceCode)
    {
        var plainTextBytes = System.Text.Encoding::UTF8.GetBytes(_sourceCode);
        return System.Convert::ToBase64String(plainTextBytes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>base64Decode</Name>
				<Source><![CDATA[
    public static str base64Decode(str _base64SourceCode)
    {
        var base64EncodedBytes = System.Convert::FromBase64String(_base64SourceCode);
        return System.Text.Encoding::UTF8.GetString(base64EncodedBytes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeScript</Name>
				<Source><![CDATA[
    public static void executeScript(MXTXppInterpreterScript _script, MXTXppInterpreterParameters _parameters)
    {
        var dependencies = MXTXppScriptDependencyManager::parseDependencies(_script.RecId);

        MXTXppInterpreterExecutor::execute(_script.SourceCode, null, _parameters, dependencies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    public static XppInterpreter.Parser.Program parse(str _sourceCode)
    {
        XppInterpreter.Lexer.XppLexer lexer = new XppInterpreter.Lexer.XppLexer(_sourceCode);
        XppInterpreter.Parser.XppParser parser = new XppInterpreter.Parser.XppParser(lexer, proxy);
        
        return parser.Parse() as XppInterpreter.Parser.Program;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeProgram</Name>
				<Source><![CDATA[
    public static void executeProgram(
        XppInterpreter.Parser.Program               _program, 
        XppInterpreter.Interpreter.Debug.IDebugger _debugger    = null, 
        MXTXppInterpreterParameters                _parameters  = MXTXppInterpreterParameters::find(),
        XppInterpreter.Interpreter.XppInterpreterDependencyCollection _dependencies = null)
    {
        // Setup options
        XppInterpreter.Interpreter.XppInterpreterOptions options = new XppInterpreter.Interpreter.XppInterpreterOptions();
        options.EmitGlobalTtsAbort = _parameters.EmitGlobalTtsAbort;
        options.MaxLoopIterations = _parameters.MaxLoopIteratations;

        XppInterpreter.Interpreter.XppInterpreter interpreter = new XppInterpreter.Interpreter.XppInterpreter(proxy);

        interpreter.Interpret(_program, _dependencies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public static void execute(
        str                                         _sourceCode, 
        XppInterpreter.Interpreter.Debug.IDebugger  _debugger = null, 
        MXTXppInterpreterParameters                 _parameters  = MXTXppInterpreterParameters::find(),
        XppInterpreter.Interpreter.XppInterpreterDependencyCollection _dependencies = null)
    {
        // Create lexer and parser
        XppInterpreter.Parser.Program parseResult = MXTXppInterpreterExecutor::parse(_sourceCode);
        MXTXppInterpreterExecutor::executeProgram(parseResult, _debugger, _parameters, _dependencies);
	}

]]></Source>
			</Method>
			<Method>
				<Name>executeScriptInBatch</Name>
				<Source><![CDATA[
    public static void executeScriptInBatch(MXTXppInterpreterScript _script)
    {
        Args args = new Args();
        args.record(_script);

        MXTXppInterpreterBatchController::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCurrentInfolog</Name>
				<Source><![CDATA[
    private static void clearCurrentInfolog()
    {
        infolog.clear();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>